/* 
 * PI Web API 2016 R2 Swagger definition
 *
 * RESTful client for PI Web API 2016 R2
 *
 * OpenAPI spec version: v1
 * Contact: pidevclub@osisoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using OSIsoft.PIDevClub.PIWebApiClient.Model;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;

namespace OSIsoft.PIDevClub.PIWebApiClient.Client
{

    public class ApiClient
    {
        private JsonSerializerSettings serializerSettings = new JsonSerializerSettings
        {
            ConstructorHandling = ConstructorHandling.AllowNonPublicDefaultConstructor
        };

        public Configuration Configuration { get; internal set; }
        public string BaseUrl { get; private set; }

        private HttpClientHandler handler = null;

        public ApiClient(string baseUrl, bool useKerberos, string username, string password)
        {
            this.BaseUrl = baseUrl;
            handler = new HttpClientHandler();
            if (useKerberos == true)
            {
                handler.UseDefaultCredentials = true;
            }
            else
            {
                handler.Credentials = new NetworkCredential(username, password);
            }
        }


        internal string ParameterToString(object obj)
        {
            if (obj is IList)
            {
                var flattenedString = new StringBuilder();
                foreach (var param in (IList)obj)
                {
                    if (flattenedString.Length > 0)
                        flattenedString.Append(",");
                    flattenedString.Append(param);
                }
                return flattenedString.ToString();
            }
            else
            {
                return Convert.ToString(obj);
            }
        }

        internal string Serialize(object Object)
        {
            try
            {
                return JsonConvert.SerializeObject(Object);
            }
            catch (Exception e)
            {
                throw new ApiException(500, e.Message);
            }

        }

        internal object Deserialize(IRestResponse localVarResponse, Type type)
        {
            try
            {
                return JsonConvert.DeserializeObject(localVarResponse.StringContent, type, serializerSettings);
            }
            catch (Exception e)
            {
                throw new ApiException(500, e.Message);
            }
        }

        internal IRestResponse CallApi(string localVarPath, HttpMethod method, CustomDictionaryForQueryString localVarQueryParams,
            string localVarPostBody, Dictionary<string, string> localVarHeaderParams, Dictionary<string, string> localVarPathParams)
        {
            HttpRequestMessage request = PrepareRequest(localVarPath, method, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarPathParams);
            HttpClient client = new HttpClient(handler);
            HttpResponseMessage response = client.SendAsync(request).Result;
            IRestResponse restResponse = new RestResponse(response);
            return restResponse;
        }

        private HttpRequestMessage PrepareRequest(string localVarPath, HttpMethod method, CustomDictionaryForQueryString localVarQueryParams, string localVarPostBody, Dictionary<string, string> localVarHeaderParams, Dictionary<string, string> localVarPathParams)
        {
            foreach (var param in localVarPathParams)
            {
                localVarPath = localVarPath.Replace("{" + param.Key + "}", param.Value);
            }
            string requestUri = string.Format("{0}{1}", this.BaseUrl, localVarPath);

            if ((localVarQueryParams != null) && (localVarQueryParams.Count > 0))
            {
                string queryString = string.Empty;
                foreach (var query in localVarQueryParams)
                {
                    queryString += string.Format("{0}={1}&", query.Key, query.Value);
                }
                requestUri = string.Format("{0}?{1}", requestUri, queryString.Substring(0, queryString.Length - 1));
            }
            HttpRequestMessage request = new HttpRequestMessage(method, requestUri);
            request.Headers.Accept.Clear();
            request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
            foreach (var item in localVarHeaderParams)
            {
                request.Headers.Add(item.Key, item.Value);
            }

            if ((method != HttpMethod.Get) && (method != HttpMethod.Delete) && string.IsNullOrEmpty(localVarPostBody) == false)
            {
                request.Content = new StringContent(localVarPostBody, Encoding.UTF8, "application/json");
            }
            return request;
        }

        internal async Task<IRestResponse> CallApiAsync(string localVarPath, HttpMethod method, CustomDictionaryForQueryString localVarQueryParams,
            string localVarPostBody, Dictionary<string, string> localVarHeaderParams, Dictionary<string, string> localVarPathParams,
            CancellationTokenSource cancellationTokenSource = null)
        {
            HttpRequestMessage request = PrepareRequest(localVarPath, method, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarPathParams);
            HttpResponseMessage response = null;
            HttpClient client = new HttpClient(handler);
            if (cancellationTokenSource == null)
            {
                try
                {
                    response = await client.SendAsync(request);

                }
                catch (Exception e)
                {
                    throw new ApiException(1, e.Message);
                }
            }
            else
            {
                response = await client.SendAsync(request, cancellationTokenSource.Token);
            }
            IRestResponse restResponse = new RestResponse(response);
            return restResponse;
        }
    }
}
